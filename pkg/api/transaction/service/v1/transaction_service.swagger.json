{
  "swagger": "2.0",
  "info": {
    "title": "transaction/service/v1/transaction_service.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "TransactionService"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/transaction.service.v1.TransactionService/Update": {
      "post": {
        "summary": "Внутренний метод обновления статуса",
        "description": "Этот метод используется только для обновления статуса транзакции, недоступен из внешнего API",
        "operationId": "TransactionService_Update",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/transaction.service.v1.responses.UpdateResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/transaction.service.v1.requests.UpdateRequest"
            }
          }
        ],
        "tags": [
          "transaction"
        ],
        "deprecated": true
      }
    },
    "/transaction/v1/create": {
      "post": {
        "summary": "Создание новой транзакции",
        "description": "Этот метод позволяет создать новую транзакцию",
        "operationId": "TransactionService_Create",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/transaction.service.v1.responses.CreateResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/transaction.service.v1.requests.CreateRequest"
            }
          }
        ],
        "tags": [
          "transaction"
        ]
      }
    },
    "/transaction/v1/list": {
      "get": {
        "summary": "Получение списка транзакций",
        "description": "Этот метод возвращает список всех транзакций",
        "operationId": "TransactionService_List",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/transaction.service.v1.responses.ListResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "limit",
            "description": "Количество записей на странице",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "cursor",
            "description": "Указатель на последний платеж",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "transaction"
        ]
      }
    },
    "/transaction/v1/{id}": {
      "get": {
        "summary": "Получение транзакции по ID",
        "description": "Этот метод возвращает информацию о транзакции по его уникальному идентификатору",
        "operationId": "TransactionService_Get",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/transaction.service.v1.responses.GetResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/google.rpc.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "id транзакции",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "transaction"
        ]
      }
    }
  },
  "definitions": {
    "enums.cryptocurrency.v1.Currency": {
      "type": "string",
      "enum": [
        "CURRENCY_CRYPTO_UNSPECIFIED",
        "CURRENCY_BTC",
        "CURRENCY_TON",
        "CURRENCY_USDT"
      ],
      "default": "CURRENCY_CRYPTO_UNSPECIFIED",
      "title": "Список доступных криптовалют(BTC, TON, ...)"
    },
    "enums.fiatcurrency.v1.Currency": {
      "type": "string",
      "enum": [
        "CURRENCY_FIAT_UNSPECIFIED",
        "CURRENCY_RUB"
      ],
      "default": "CURRENCY_FIAT_UNSPECIFIED",
      "title": "Список доступных фиатных валют(RUB)"
    },
    "enums.transactionstatus.v1.Status": {
      "type": "string",
      "enum": [
        "STATUS_UNSPECIFIED",
        "STATUS_CREATED",
        "STATUS_PENDING",
        "STATUS_SUCCESS",
        "STATUS_FAILED",
        "STATUS_UNKNOWN"
      ],
      "default": "STATUS_UNSPECIFIED",
      "title": "Статус транхакции(PENDING, SUCCESS, ...)"
    },
    "enums.transactiontype.v1.Type": {
      "type": "string",
      "enum": [
        "TYPE_UNSPECIFIED",
        "TYPE_INVOICE",
        "TYPE_WITHDRAW"
      ],
      "default": "TYPE_UNSPECIFIED",
      "title": "Тип перевода(INVOICE, WITHDRAW)"
    },
    "google.protobuf.Any": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "google.rpc.Status": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/google.protobuf.Any"
          }
        }
      }
    },
    "google.type.Decimal": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string",
          "description": "The decimal value, as a string.\n\nThe string representation consists of an optional sign, `+` (`U+002B`)\nor `-` (`U+002D`), followed by a sequence of zero or more decimal digits\n(\"the integer\"), optionally followed by a fraction, optionally followed\nby an exponent.\n\nThe fraction consists of a decimal point followed by zero or more decimal\ndigits. The string must contain at least one digit in either the integer\nor the fraction. The number formed by the sign, the integer and the\nfraction is referred to as the significand.\n\nThe exponent consists of the character `e` (`U+0065`) or `E` (`U+0045`)\nfollowed by one or more decimal digits.\n\nServices **should** normalize decimal values before storing them by:\n\n  - Removing an explicitly-provided `+` sign (`+2.5` -\u003e `2.5`).\n  - Replacing a zero-length integer value with `0` (`.5` -\u003e `0.5`).\n  - Coercing the exponent character to lower-case (`2.5E8` -\u003e `2.5e8`).\n  - Removing an explicitly-provided zero exponent (`2.5e0` -\u003e `2.5`).\n\nServices **may** perform additional normalization based on its own needs\nand the internal decimal implementation selected, such as shifting the\ndecimal point and exponent value together (example: `2.5e-1` \u003c-\u003e `0.25`).\nAdditionally, services **may** preserve trailing zeroes in the fraction\nto indicate increased precision, but are not required to do so.\n\nNote that only the `.` character is supported to divide the integer\nand the fraction; `,` **should not** be supported regardless of locale.\nAdditionally, thousand separators **should not** be supported. If a\nservice does support them, values **must** be normalized.\n\nThe ENBF grammar is:\n\n    DecimalString =\n      [Sign] Significand [Exponent];\n\n    Sign = '+' | '-';\n\n    Significand =\n      Digits ['.'] [Digits] | [Digits] '.' Digits;\n\n    Exponent = ('e' | 'E') [Sign] Digits;\n\n    Digits = { '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' };\n\nServices **should** clearly document the range of supported values, the\nmaximum supported precision (total number of digits), and, if applicable,\nthe scale (number of digits after the decimal point), as well as how it\nbehaves when receiving out-of-bounds values.\n\nServices **may** choose to accept values passed as input even when the\nvalue has a higher precision or scale than the service supports, and\n**should** round the value to fit the supported scale. Alternatively, the\nservice **may** error with `400 Bad Request` (`INVALID_ARGUMENT` in gRPC)\nif precision would be lost.\n\nServices **should** error with `400 Bad Request` (`INVALID_ARGUMENT` in\ngRPC) if the service receives a value outside of the supported range."
        }
      },
      "description": "A representation of a decimal value, such as 2.5. Clients may convert values\ninto language-native decimal formats, such as Java's [BigDecimal][] or\nPython's [decimal.Decimal][].\n\n[BigDecimal]:\nhttps://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/math/BigDecimal.html\n[decimal.Decimal]: https://docs.python.org/3/library/decimal.html"
    },
    "transaction.models.transaction.v1.Operation": {
      "type": "object",
      "properties": {
        "account": {
          "type": "string",
          "title": "Реквизит: баланс или адрес крипто-кошелька"
        },
        "money": {
          "$ref": "#/definitions/types.money.v1.Money",
          "title": "Данные о сумме операции(amount, success_paid, fee)"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      },
      "title": "Операция списания или зачисления"
    },
    "transaction.models.transaction.v1.Transaction": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "transaction_id - id транзакции"
        },
        "status": {
          "$ref": "#/definitions/enums.transactionstatus.v1.Status",
          "title": "Текущий статус транзакции"
        },
        "type": {
          "$ref": "#/definitions/enums.transactiontype.v1.Type",
          "title": "Тип транзакции"
        },
        "from": {
          "$ref": "#/definitions/transaction.models.transaction.v1.Operation",
          "title": "Операция списания (например, списание с balance)"
        },
        "to": {
          "$ref": "#/definitions/transaction.models.transaction.v1.Operation",
          "title": "Операция зачисления (например, начисление на крипто-кошелек)"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        }
      },
      "title": "Обменная транзакция, включающая списание и зачисление"
    },
    "transaction.service.v1.requests.CreateRequest": {
      "type": "object",
      "properties": {
        "transaction": {
          "$ref": "#/definitions/transaction.models.transaction.v1.Transaction"
        }
      },
      "title": "Создание транзакции перевода из фиатной валюты в криптовалюту"
    },
    "transaction.service.v1.requests.GetRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "id транзакции"
        }
      },
      "title": "Получить информацию о платежной транзакции"
    },
    "transaction.service.v1.requests.UpdateRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Id транзакции"
        },
        "status": {
          "$ref": "#/definitions/enums.transactionstatus.v1.Status",
          "title": "Статус транзакции"
        }
      },
      "title": "Внутренний метод обновления статуса транзакции"
    },
    "transaction.service.v1.responses.CreateResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "id транзакции"
        }
      }
    },
    "transaction.service.v1.responses.GetResponse": {
      "type": "object",
      "properties": {
        "transaction": {
          "$ref": "#/definitions/transaction.models.transaction.v1.Transaction",
          "title": "Встраиваем общую структуру для данных транзакции"
        }
      },
      "title": "Получение данных о платежной транзакции по id"
    },
    "transaction.service.v1.responses.ListResponse": {
      "type": "object",
      "properties": {
        "transactions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/transaction.service.v1.requests.GetRequest"
          },
          "title": "Список платежей"
        },
        "nextCursor": {
          "type": "string",
          "title": "Курсор для следующей страницы (если он есть)"
        }
      },
      "title": "Возвращает список транзакций с пагинацией(cursor-based)"
    },
    "transaction.service.v1.responses.UpdateResponse": {
      "type": "object"
    },
    "types.money.v1.Money": {
      "type": "object",
      "properties": {
        "amount": {
          "$ref": "#/definitions/google.type.Decimal",
          "title": "Введённая сумма"
        },
        "successPaid": {
          "$ref": "#/definitions/google.type.Decimal",
          "title": "Сумма + комиссия"
        },
        "fee": {
          "$ref": "#/definitions/google.type.Decimal",
          "title": "Комиссия (если есть)"
        },
        "crypto": {
          "$ref": "#/definitions/enums.cryptocurrency.v1.Currency",
          "description": "BTC, TON ..."
        },
        "fiat": {
          "$ref": "#/definitions/enums.fiatcurrency.v1.Currency",
          "description": "RUB, ..."
        }
      },
      "title": "Универсальное представление денежек"
    }
  }
}
